type Company {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  shortName: String
}

type CompanyAggregator {
  count: Int
  totalCount: Int
}

type CompanyConnection {
  values: [Company]
  groupBy: CompanyGroupBy
  aggregate: CompanyAggregator
}

type CompanyConnectionCreated_at {
  key: DateTime
  connection: CompanyConnection
}

type CompanyConnectionId {
  key: ID
  connection: CompanyConnection
}

type CompanyConnectionName {
  key: String
  connection: CompanyConnection
}

type CompanyConnectionShortName {
  key: String
  connection: CompanyConnection
}

type CompanyConnectionUpdated_at {
  key: DateTime
  connection: CompanyConnection
}

type CompanyGroupBy {
  id: [CompanyConnectionId]
  created_at: [CompanyConnectionCreated_at]
  updated_at: [CompanyConnectionUpdated_at]
  name: [CompanyConnectionName]
  shortName: [CompanyConnectionShortName]
}

input CompanyInput {
  name: String
  shortName: String
}

input createCompanyInput {
  data: CompanyInput
}

type createCompanyPayload {
  company: Company
}

input createDevCountCategoryInput {
  data: DevCountCategoryInput
}

type createDevCountCategoryPayload {
  devCountCategory: DevCountCategories
}

input createQuadrantInput {
  data: QuadrantInput
}

type createQuadrantPayload {
  quadrant: Quadrant
}

input createRingInput {
  data: RingInput
}

type createRingPayload {
  ring: Ring
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTechnologyInput {
  data: TechnologyInput
}

type createTechnologyPayload {
  technology: Technology
}

input createTimelineInput {
  data: TimelineInput
}

type createTimelinePayload {
  timeline: Timeline
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteCompanyInput {
  where: InputID
}

type deleteCompanyPayload {
  company: Company
}

input deleteDevCountCategoryInput {
  where: InputID
}

type deleteDevCountCategoryPayload {
  devCountCategory: DevCountCategories
}

input deleteQuadrantInput {
  where: InputID
}

type deleteQuadrantPayload {
  quadrant: Quadrant
}

input deleteRingInput {
  where: InputID
}

type deleteRingPayload {
  ring: Ring
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTechnologyInput {
  where: InputID
}

type deleteTechnologyPayload {
  technology: Technology
}

input deleteTimelineInput {
  where: InputID
}

type deleteTimelinePayload {
  timeline: Timeline
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type DevCountCategories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
}

type DevCountCategoriesAggregator {
  count: Int
  totalCount: Int
}

type DevCountCategoriesConnection {
  values: [DevCountCategories]
  groupBy: DevCountCategoriesGroupBy
  aggregate: DevCountCategoriesAggregator
}

type DevCountCategoriesConnectionCreated_at {
  key: DateTime
  connection: DevCountCategoriesConnection
}

type DevCountCategoriesConnectionId {
  key: ID
  connection: DevCountCategoriesConnection
}

type DevCountCategoriesConnectionName {
  key: String
  connection: DevCountCategoriesConnection
}

type DevCountCategoriesConnectionUpdated_at {
  key: DateTime
  connection: DevCountCategoriesConnection
}

type DevCountCategoriesGroupBy {
  id: [DevCountCategoriesConnectionId]
  created_at: [DevCountCategoriesConnectionCreated_at]
  updated_at: [DevCountCategoriesConnectionUpdated_at]
  name: [DevCountCategoriesConnectionName]
}

input DevCountCategoryInput {
  name: String
}

input editCompanyInput {
  name: String
  shortName: String
}

input editDevCountCategoryInput {
  name: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editQuadrantInput {
  name: String
  color: String
  order: Int
}

input editRingInput {
  name: String
  color: String
  backgroundColor: String
  order: Int
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTechnologyInput {
  name: String
  isNew: Boolean
  inRadar: Boolean
  companies: [ID]
  ring: ID
  quadrant: ID
  description: String
  devCount: ID
}

input editTimelineInput {
  name: String
  isNew: Boolean
  publishedAt: Date
  inRadar: Boolean
  companies: [ID]
  ring: ID
  quadrant: ID
  description: String
  devCount: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPersmissionsPasswordPayload | Company | CompanyConnection | CompanyAggregator | CompanyGroupBy | CompanyConnectionId | CompanyConnectionCreated_at | CompanyConnectionUpdated_at | CompanyConnectionName | CompanyConnectionShortName | createCompanyPayload | updateCompanyPayload | deleteCompanyPayload | DevCountCategories | DevCountCategoriesConnection | DevCountCategoriesAggregator | DevCountCategoriesGroupBy | DevCountCategoriesConnectionId | DevCountCategoriesConnectionCreated_at | DevCountCategoriesConnectionUpdated_at | DevCountCategoriesConnectionName | createDevCountCategoryPayload | updateDevCountCategoryPayload | deleteDevCountCategoryPayload | Quadrant | QuadrantConnection | QuadrantAggregator | QuadrantAggregatorSum | QuadrantAggregatorAvg | QuadrantAggregatorMin | QuadrantAggregatorMax | QuadrantGroupBy | QuadrantConnectionId | QuadrantConnectionCreated_at | QuadrantConnectionUpdated_at | QuadrantConnectionName | QuadrantConnectionColor | QuadrantConnectionOrder | createQuadrantPayload | updateQuadrantPayload | deleteQuadrantPayload | Ring | RingConnection | RingAggregator | RingAggregatorSum | RingAggregatorAvg | RingAggregatorMin | RingAggregatorMax | RingGroupBy | RingConnectionId | RingConnectionCreated_at | RingConnectionUpdated_at | RingConnectionName | RingConnectionColor | RingConnectionBackgroundColor | RingConnectionOrder | createRingPayload | updateRingPayload | deleteRingPayload | Technology | TechnologyConnection | TechnologyAggregator | TechnologyGroupBy | TechnologyConnectionId | TechnologyConnectionCreated_at | TechnologyConnectionUpdated_at | TechnologyConnectionName | TechnologyConnectionIsNew | TechnologyConnectionInRadar | TechnologyConnectionRing | TechnologyConnectionQuadrant | TechnologyConnectionDescription | TechnologyConnectionDevCount | createTechnologyPayload | updateTechnologyPayload | deleteTechnologyPayload | Timeline | TimelineConnection | TimelineAggregator | TimelineGroupBy | TimelineConnectionId | TimelineConnectionCreated_at | TimelineConnectionUpdated_at | TimelineConnectionName | TimelineConnectionIsNew | TimelineConnectionPublishedAt | TimelineConnectionInRadar | TimelineConnectionRing | TimelineConnectionQuadrant | TimelineConnectionDescription | TimelineConnectionDevCount | createTimelinePayload | updateTimelinePayload | deleteTimelinePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCompany(input: createCompanyInput): createCompanyPayload
  updateCompany(input: updateCompanyInput): updateCompanyPayload
  deleteCompany(input: deleteCompanyInput): deleteCompanyPayload
  createDevCountCategory(input: createDevCountCategoryInput): createDevCountCategoryPayload
  updateDevCountCategory(input: updateDevCountCategoryInput): updateDevCountCategoryPayload
  deleteDevCountCategory(input: deleteDevCountCategoryInput): deleteDevCountCategoryPayload
  createQuadrant(input: createQuadrantInput): createQuadrantPayload
  updateQuadrant(input: updateQuadrantInput): updateQuadrantPayload
  deleteQuadrant(input: deleteQuadrantInput): deleteQuadrantPayload
  createRing(input: createRingInput): createRingPayload
  updateRing(input: updateRingInput): updateRingPayload
  deleteRing(input: deleteRingInput): deleteRingPayload
  createTechnology(input: createTechnologyInput): createTechnologyPayload
  updateTechnology(input: updateTechnologyInput): updateTechnologyPayload
  deleteTechnology(input: deleteTechnologyInput): deleteTechnologyPayload
  createTimeline(input: createTimelineInput): createTimelinePayload
  updateTimeline(input: updateTimelineInput): updateTimelinePayload
  deleteTimeline(input: deleteTimelineInput): deleteTimelinePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPersmissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Quadrant {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  color: String
  order: Int!
}

type QuadrantAggregator {
  count: Int
  totalCount: Int
  sum: QuadrantAggregatorSum
  avg: QuadrantAggregatorAvg
  min: QuadrantAggregatorMin
  max: QuadrantAggregatorMax
}

type QuadrantAggregatorAvg {
  order: Float
}

type QuadrantAggregatorMax {
  order: Float
}

type QuadrantAggregatorMin {
  order: Float
}

type QuadrantAggregatorSum {
  order: Float
}

type QuadrantConnection {
  values: [Quadrant]
  groupBy: QuadrantGroupBy
  aggregate: QuadrantAggregator
}

type QuadrantConnectionColor {
  key: String
  connection: QuadrantConnection
}

type QuadrantConnectionCreated_at {
  key: DateTime
  connection: QuadrantConnection
}

type QuadrantConnectionId {
  key: ID
  connection: QuadrantConnection
}

type QuadrantConnectionName {
  key: String
  connection: QuadrantConnection
}

type QuadrantConnectionOrder {
  key: Int
  connection: QuadrantConnection
}

type QuadrantConnectionUpdated_at {
  key: DateTime
  connection: QuadrantConnection
}

type QuadrantGroupBy {
  id: [QuadrantConnectionId]
  created_at: [QuadrantConnectionCreated_at]
  updated_at: [QuadrantConnectionUpdated_at]
  name: [QuadrantConnectionName]
  color: [QuadrantConnectionColor]
  order: [QuadrantConnectionOrder]
}

input QuadrantInput {
  name: String
  color: String
  order: Int!
}

type Query {
  company(id: ID!): Company
  companies(sort: String, limit: Int, start: Int, where: JSON): [Company]
  companiesConnection(sort: String, limit: Int, start: Int, where: JSON): CompanyConnection
  devCountCategory(id: ID!): DevCountCategories
  devCountCategories(sort: String, limit: Int, start: Int, where: JSON): [DevCountCategories]
  devCountCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): DevCountCategoriesConnection
  quadrant(id: ID!): Quadrant
  quadrants(sort: String, limit: Int, start: Int, where: JSON): [Quadrant]
  quadrantsConnection(sort: String, limit: Int, start: Int, where: JSON): QuadrantConnection
  ring(id: ID!): Ring
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  ringsConnection(sort: String, limit: Int, start: Int, where: JSON): RingConnection
  technology(id: ID!): Technology
  technologies(sort: String, limit: Int, start: Int, where: JSON): [Technology]
  technologiesConnection(sort: String, limit: Int, start: Int, where: JSON): TechnologyConnection
  timeline(id: ID!): Timeline
  timelines(sort: String, limit: Int, start: Int, where: JSON): [Timeline]
  timelinesConnection(sort: String, limit: Int, start: Int, where: JSON): TimelineConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Ring {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  color: String
  backgroundColor: String
  order: Int
}

type RingAggregator {
  count: Int
  totalCount: Int
  sum: RingAggregatorSum
  avg: RingAggregatorAvg
  min: RingAggregatorMin
  max: RingAggregatorMax
}

type RingAggregatorAvg {
  order: Float
}

type RingAggregatorMax {
  order: Float
}

type RingAggregatorMin {
  order: Float
}

type RingAggregatorSum {
  order: Float
}

type RingConnection {
  values: [Ring]
  groupBy: RingGroupBy
  aggregate: RingAggregator
}

type RingConnectionBackgroundColor {
  key: String
  connection: RingConnection
}

type RingConnectionColor {
  key: String
  connection: RingConnection
}

type RingConnectionCreated_at {
  key: DateTime
  connection: RingConnection
}

type RingConnectionId {
  key: ID
  connection: RingConnection
}

type RingConnectionName {
  key: String
  connection: RingConnection
}

type RingConnectionOrder {
  key: Int
  connection: RingConnection
}

type RingConnectionUpdated_at {
  key: DateTime
  connection: RingConnection
}

type RingGroupBy {
  id: [RingConnectionId]
  created_at: [RingConnectionCreated_at]
  updated_at: [RingConnectionUpdated_at]
  name: [RingConnectionName]
  color: [RingConnectionColor]
  backgroundColor: [RingConnectionBackgroundColor]
  order: [RingConnectionOrder]
}

input RingInput {
  name: String
  color: String
  backgroundColor: String
  order: Int
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Technology {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  isNew: Boolean
  inRadar: Boolean
  ring: Ring
  quadrant: Quadrant
  description: String
  devCount: DevCountCategories
  companies(sort: String, limit: Int, start: Int, where: JSON): [Company]
}

type TechnologyAggregator {
  count: Int
  totalCount: Int
}

type TechnologyConnection {
  values: [Technology]
  groupBy: TechnologyGroupBy
  aggregate: TechnologyAggregator
}

type TechnologyConnectionCreated_at {
  key: DateTime
  connection: TechnologyConnection
}

type TechnologyConnectionDescription {
  key: String
  connection: TechnologyConnection
}

type TechnologyConnectionDevCount {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionId {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionInRadar {
  key: Boolean
  connection: TechnologyConnection
}

type TechnologyConnectionIsNew {
  key: Boolean
  connection: TechnologyConnection
}

type TechnologyConnectionName {
  key: String
  connection: TechnologyConnection
}

type TechnologyConnectionQuadrant {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionRing {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionUpdated_at {
  key: DateTime
  connection: TechnologyConnection
}

type TechnologyGroupBy {
  id: [TechnologyConnectionId]
  created_at: [TechnologyConnectionCreated_at]
  updated_at: [TechnologyConnectionUpdated_at]
  name: [TechnologyConnectionName]
  isNew: [TechnologyConnectionIsNew]
  inRadar: [TechnologyConnectionInRadar]
  ring: [TechnologyConnectionRing]
  quadrant: [TechnologyConnectionQuadrant]
  description: [TechnologyConnectionDescription]
  devCount: [TechnologyConnectionDevCount]
}

input TechnologyInput {
  name: String
  isNew: Boolean
  inRadar: Boolean
  companies: [ID]
  ring: ID
  quadrant: ID
  description: String
  devCount: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

type Timeline {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  isNew: Boolean
  publishedAt: Date!
  inRadar: Boolean
  ring: Ring
  quadrant: Quadrant
  description: String
  devCount: DevCountCategories
  companies(sort: String, limit: Int, start: Int, where: JSON): [Company]
}

type TimelineAggregator {
  count: Int
  totalCount: Int
}

type TimelineConnection {
  values: [Timeline]
  groupBy: TimelineGroupBy
  aggregate: TimelineAggregator
}

type TimelineConnectionCreated_at {
  key: DateTime
  connection: TimelineConnection
}

type TimelineConnectionDescription {
  key: String
  connection: TimelineConnection
}

type TimelineConnectionDevCount {
  key: ID
  connection: TimelineConnection
}

type TimelineConnectionId {
  key: ID
  connection: TimelineConnection
}

type TimelineConnectionInRadar {
  key: Boolean
  connection: TimelineConnection
}

type TimelineConnectionIsNew {
  key: Boolean
  connection: TimelineConnection
}

type TimelineConnectionName {
  key: String
  connection: TimelineConnection
}

type TimelineConnectionPublishedAt {
  key: ID
  connection: TimelineConnection
}

type TimelineConnectionQuadrant {
  key: ID
  connection: TimelineConnection
}

type TimelineConnectionRing {
  key: ID
  connection: TimelineConnection
}

type TimelineConnectionUpdated_at {
  key: DateTime
  connection: TimelineConnection
}

type TimelineGroupBy {
  id: [TimelineConnectionId]
  created_at: [TimelineConnectionCreated_at]
  updated_at: [TimelineConnectionUpdated_at]
  name: [TimelineConnectionName]
  isNew: [TimelineConnectionIsNew]
  publishedAt: [TimelineConnectionPublishedAt]
  inRadar: [TimelineConnectionInRadar]
  ring: [TimelineConnectionRing]
  quadrant: [TimelineConnectionQuadrant]
  description: [TimelineConnectionDescription]
  devCount: [TimelineConnectionDevCount]
}

input TimelineInput {
  name: String
  isNew: Boolean
  publishedAt: Date!
  inRadar: Boolean
  companies: [ID]
  ring: ID
  quadrant: ID
  description: String
  devCount: ID
}

input updateCompanyInput {
  where: InputID
  data: editCompanyInput
}

type updateCompanyPayload {
  company: Company
}

input updateDevCountCategoryInput {
  where: InputID
  data: editDevCountCategoryInput
}

type updateDevCountCategoryPayload {
  devCountCategory: DevCountCategories
}

input updateQuadrantInput {
  where: InputID
  data: editQuadrantInput
}

type updateQuadrantPayload {
  quadrant: Quadrant
}

input updateRingInput {
  where: InputID
  data: editRingInput
}

type updateRingPayload {
  ring: Ring
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTechnologyInput {
  where: InputID
  data: editTechnologyInput
}

type updateTechnologyPayload {
  technology: Technology
}

input updateTimelineInput {
  where: InputID
  data: editTimelineInput
}

type updateTimelinePayload {
  timeline: Timeline
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UserPersmissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
